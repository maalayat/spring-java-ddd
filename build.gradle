// Common for all projects
allprojects {
  apply plugin: 'java'
  apply plugin: 'io.spring.dependency-management'
  apply plugin: 'org.springframework.boot'

  sourceCompatibility = 17
  targetCompatibility = 17

  repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
  }

  ext {
    set('springCloudVersion', "Hoxton.M3")
  }

  dependencies {
    // Prod
    implementation 'org.apache.logging.log4j:log4j-core:2.17.2'
    implementation 'com.vlkan.log4j2:log4j2-logstash-layout:1.0.5'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // DB
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation "io.hypersistence:hypersistence-utils-hibernate-55:3.1.1"
    runtimeOnly 'com.mysql:mysql-connector-j'

    // mapstruct
    implementation 'org.mapstruct:mapstruct:1.5.1.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.1.Final'

    // RabbitMq
    implementation 'org.springframework.boot:spring-boot-starter-amqp'

    // Hibernate-types
    implementation 'com.vladmihalcea:hibernate-types-55:2.21.1'

    // Reflections
    implementation 'org.reflections:reflections:0.10.2'

    // Guava
    implementation 'com.google.guava:guava:31.1-jre'

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'com.github.javafaker:javafaker:0.12'
    testImplementation 'com.github.javafaker:javafaker:0.12:javadoc'
  }

  dependencyManagement {
    imports {
      mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
  }

  test {
    useJUnitPlatform()

    testLogging {
      events "passed", "skipped", "failed"
    }
  }


  task view_paths {
    doLast { task ->
      println "$task.project.name"
      println "------------------"
      println "Main: $sourceSets.main.java.srcDirTrees"
      println "   Resources: $sourceSets.main.resources.srcDirTrees"
      println "Tests: $sourceSets.test.java.srcDirTrees"
      println "   Resources: $sourceSets.test.resources.srcDirTrees"
    }
  }
}

// All subprojects (located in src/*)
subprojects {
  group = "ec.solmedia.${rootProject.name}"

  sourceSets {
    main {
      java { srcDirs = ['main'] }
      resources { srcDirs = ['main/resources'] }
    }

    test {
      java { srcDirs = ['test'] }
      resources { srcDirs = ['test/resources'] }
    }
  }

  dependencies {
    implementation("org.springframework.boot:spring-boot-starter-web")

    testImplementation rootProject.sourceSets.main.output

    if (project.name != "shared") {
      implementation project(":shared")
      testImplementation project(":shared").sourceSets.test.output
    }
  }

  bootJar {
    enabled = false
  }

  jar {
    enabled = true
  }
}

// Main project (located in app/)
buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:2.7.16")
  }
}

sourceSets {
  main {
    java { srcDirs = ['app/main'] }
    resources { srcDirs = ['app/main/resources'] }
  }

  test {
    java { srcDirs = ['app/test'] }
    resources { srcDirs = ['app/test/resources'] }
  }
}

apply plugin: 'application'

mainClassName = 'ec.solmedia.app.Starter'

dependencies {
  implementation("org.springframework.boot:spring-boot-starter-web")

  implementation project(":shared")
  implementation project(":backoffice")
  implementation project(":mooc")

}

